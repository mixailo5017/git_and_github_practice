@mixin reset{
	/*Start Rest*/
	article, aside, details, figcaption, figure, footer, header, hgroup, nav, section { display: block; }
	audio, canvas, video { display: inline-block; *display: inline; *zoom: 1; }
	audio:not([controls]) { display: none; }
	[hidden] { display: none; }
	html { font-size: 100%; -webkit-text-size-adjust: 100%; -ms-text-size-adjust: 100%; }
	html, button, input, select, textarea { font-family: sans-serif; color: #222; }
	body { margin: 0; font-size: 1em; line-height: 1.4; }
	::-moz-selection { background: #135669; color: white; text-shadow: none; }
	::selection { background: #135669; color: white; text-shadow: none; }
	a { color: $base; outline:none; }
	a:visited { color: $base; }
	a:hover { color: darken($base, 20%); }
	a:focus { outline: thin dotted; color: inherit; }
	a:hover, a:active { outline: 0; }
	abbr[title] { border-bottom: 1px dotted; }
	b, strong { font-weight: bold; }
	blockquote { margin: 1em 40px; }
	dfn { font-style: italic; }
	hr { display: block; height: 1px; border: 0; border-top: 1px solid #ccc; margin: 1em 0; padding: 0; }
	ins { background: #ff9; color: #000; text-decoration: none; }
	mark { background: #ff0; color: #000; font-style: italic; font-weight: bold; }
	pre, code, kbd, samp { font-family: monospace, serif; _font-family: 'courier new', monospace; font-size: 1em; }
	pre { white-space: pre; white-space: pre-wrap; word-wrap: break-word; }
	q { quotes: none; }
	q:before, q:after { content: ""; content: none; }
	small { font-size: 85%; }
	sub, sup { font-size: 75%; line-height: 0; position: relative; vertical-align: baseline; }
	sup { top: -0.5em; }
	sub { bottom: -0.25em; }
	ul, ol { margin: 1em 0; padding: 0 0 0 40px; }
	dd { margin: 0 0 0 40px; }
	nav ul, nav ol { list-style: none; list-style-image: none; margin: 0; padding: 0; }
	img { border: 0; -ms-interpolation-mode: bicubic; vertical-align: middle; }
	svg:not(:root) { overflow: hidden; }
	figure { margin: 0; }
	form { margin: 0; }
	fieldset { border: 0; margin: 0; padding: 0; }
	label { cursor: pointer; }
	legend { border: 0; *margin-left: -7px; padding: 0; white-space: normal; }
	button, input, select, textarea { font-size: 100%; margin: 0; vertical-align: baseline; *vertical-align: middle; }
	button, input { line-height: normal; }
	button, input[type="button"], input[type="reset"], input[type="submit"] { cursor: pointer; -webkit-appearance: button; *overflow: visible; }
	button[disabled], input[disabled] { cursor: default; }
	input[type="checkbox"], input[type="radio"] { box-sizing: border-box; padding: 0; *width: 13px; *height: 13px; }
	input[type="search"] { -webkit-appearance: textfield; -moz-box-sizing: content-box; -webkit-box-sizing: content-box; box-sizing: content-box; }
	input[type="search"]::-webkit-search-decoration, input[type="search"]::-webkit-search-cancel-button { -webkit-appearance: none; }
	button::-moz-focus-inner, input::-moz-focus-inner { border: 0; padding: 0; }
	textarea { overflow: auto; vertical-align: top; resize: vertical; }
	input:invalid, textarea:invalid { background-color: #f0dddd; }
	table { border-collapse: collapse; border-spacing: 0; }
	td { vertical-align: top; }
	.chromeframe { margin: 0.2em 0; background: #ccc; color: black; padding: 0.2em 0; }
	/*End Reset*/

	.skip{position:absolute; left:-9999px; width:1px; height:1px; overflow:hidden; width:600px; color:#FFF;
		&:focus, &:active{position:static; width:auto; height:auto; left:0px ; margin-right:10px;}
	}
	.noreveal{
		&:focus, &:active{position:absolute; left:-9999px; width:1px; height:1px; overflow:hidden; width:600px; color:#FFF;}
	}
	.access{position:absolute; left:-9999px; width:1px; height:1px; overflow:hidden;}
	.forPrint{display: none;}
}

@mixin hide-text {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

@mixin access{
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}

@mixin visual_hide{
	position:absolute; left:-9999px; width:1px; height:1px; overflow:hidden;
}

@mixin bp($left, $top){
	background-position: $left $top;
}

@mixin clearfix{
	.clear_fix:after{ content: ""; display: block; height: 0; clear: both;}
	.clear_fix{min-height: 1%;}
}


@mixin box-shadow ($params...){
  -webkit-box-shadow: $params;
     -moz-box-shadow: $params;
          box-shadow: $params;
}


@mixin br($radius){
  	-moz-border-radius: $radius;
    -webkit-border-radius: $radius;
  	border-radius: $radius;
}


@mixin gv($start, $end){
  	background: $start;
  	background-image: -moz-linear-gradient(top, $start, $end);
  	background-image: -webkit-gradient(linear, left top, left bottom, from($start), to($end));
  	background-image: -webkit-linear-gradient(top, $start, $end);
  	background-image: -o-linear-gradient(top, $start, $end);
  	background-image: linear-gradient(top, $start, $end);
  	background-image: -ms-linear-gradient(top, $start, $end);
  	filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='$start', endColorstr='$end');
}


@mixin gh($start, $end){
  	background: ($start + $end) / 2;
  	background-image: -moz-linear-gradient(left, $start, $end);
    background-image: -webkit-gradient(linear, left center, right center, from($start), to($end));
  	background-image: -webkit-linear-gradient(left center, right center, from($start), to($end));
  	background-image: -o-linear-gradient(left, $start, $end);
  	background-image: linear-gradient(left, $start, $end);
  	background-image: -ms-linear-gradient(left, $start, $end);
}


@mixin rotate ($deg) {
  -moz-transform: rotate(#{$deg}deg);
  -o-transform: rotate(#{$deg}deg);
  -ms-transform: rotate(#{$deg}deg);
  -webkit-transform: rotate(#{$deg}deg);
}

@mixin scale ($size) {
	-moz-transform: scale(#{$size});
	-o-transform: scale(#{$size});
	-ms-transform: scale(#{$size});
	-webkit-transform: scale(#{$size});
}

@mixin transition ($value...) {
  -moz-transition: $value;
  -o-transition: $value;
  -ms-transition: $value;
  -webkit-transition: $value;
  transition: $value;
}

@mixin filter ($value...){
	-moz-filter: $value;
	-o-filter: $value;
	-ms-filter: $value;
	-webkit-filter: $value;
	filter: $value;
}

@mixin rem($sizeValue: 1.6){
  font-size: ($sizeValue * 10) + px;
  font-size: $sizeValue + rem;
}

@mixin vendorize($property, $value) {
	-webkit-#{$property}: $value;
	-moz-#{$property}: $value;
	-ms-#{$property}: $value;
	-o-#{$property}: $value;
	#{$property}: $value;
}

@function pw($target, $context){
 @return ($target / $context) * 100%;
}